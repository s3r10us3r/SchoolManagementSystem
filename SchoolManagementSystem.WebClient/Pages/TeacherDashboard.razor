@using SchoolManagementSystem.WebClient.Components
@inject ILessonsWebService LessonsWebService
@inject NavigationManager NavigationManager

<RedirectToLogin />

<PageTitle>Teacher Dashboard</PageTitle>

<div class="container">
    <h2 class="mb-4">Teacher Dashboard</h2>

    <div class="row">
        <!-- Lesson Plan Section -->
        <div class="col-md-6">
            <h3>Your Lesson Plan</h3>

            @if (LessonsByDay.Any())
            {
                @foreach (var day in LessonsByDay.Keys)
                {
                    <h4 class="mt-3">@day</h4> <!-- Display the day name -->
                    <div class="list-group">
                        @foreach (var lesson in LessonsByDay[day])
                        {
                            <button class="list-group-item list-group-item-action" @onclick="() => GoToCreateAssignment(lesson)">
                                <strong>@lesson.Name</strong> - @lesson.Teacher.FirstName @lesson.Teacher.LastName
                            </button>
                        }
                    </div>
                }
            }
            else
            {
                <p>No upcoming lessons.</p>
            }
        </div>

        <!-- Quick Actions Section -->
        <div class="col-md-6">
            <h3>Actions</h3>
            <div class="d-grid gap-2">
                <button class="btn btn-warning" @onclick="GoToGradeAssignments">Grade Assignments</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, List<LessonWithTeacherDto>> LessonsByDay { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var lessonsResult = await LessonsWebService.GetYour();
        if (lessonsResult.IsSuccess)
        {
            var lessons = lessonsResult.Data!;

            // Group lessons by weekday
            LessonsByDay = lessons
                .SelectMany(lesson => lesson.Occurances.Select(occ => new { Lesson = lesson, Day = GetDayName(occ.DayOfWeek) }))
                .GroupBy(x => x.Day)
                .ToDictionary(g => g.Key, g => g.Select(x => x.Lesson).Distinct().ToList());
        }
    }

    private string GetDayName(int dayOfWeek)
    {
        return dayOfWeek switch
        {
            1 => "Monday",
            2 => "Tuesday",
            3 => "Wednesday",
            4 => "Thursday",
            5 => "Friday",
            6 => "Saturday",
            7 => "Sunday",
            _ => "Unknown"
        };
    }

    private void GoToCreateAssignment(LessonWithTeacherDto lesson)
    {
        NavigationManager.NavigateTo($"/assignments/create/{lesson.Id}");
    }

    private void GoToGradeAssignments() => NavigationManager.NavigateTo("/assignments/grade");
}
